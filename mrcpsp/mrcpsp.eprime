language ESSENCE' 1.0

$  timetable model of RCPSP.  At each time step, have a set of bools indicating which jobs are active. 
$  This version for SR ver with ragged matrices.

given horizon : int(0..)                             $ makespan
given jobs : int(1..)                                $ number of jobs
given resourcesRenew : int(0..)                      $ number of renewable resources
given resourcesNonrenew : int(0..)                   $ number of non-renewable resources

letting resources=resourcesRenew+resourcesNonrenew   $ number of all resources

given resourceLimits : matrix indexed by [int(1..resources)] of int(0..)

$  For each job, the list of successors.
given successors : matrix indexed by [int(1..jobs), int(..)] of int(1..jobs)

$  resourceUsage indexed by job, mode and resource. 
given resourceUsage : matrix indexed by [int(1..jobs), int(..), int(1..resources)] of int(0..)

$  durations indexed by job, mode.
given durations : matrix indexed by [int(1..jobs), int(..)] of int(0..)

letting maxmode = max([ length(durations[j,..]) | j : int(1..jobs) ])
letting maxduration = max( flatten(durations) )
letting maxdemand = max ( flatten(resourceUsage) )

$$$$ Alan params
given candidateParents : matrix indexed by [int(1..jobs), int(..)] of int(1..jobs)

$  Decision variables
find jobStart : matrix indexed by [int(1..jobs)] of int(0..horizon)

find duration : matrix indexed by [int(1..jobs)] of int(0..horizon)

$  Indexed by job, mode, timestep.
find jobActive : matrix indexed by [int(1..jobs), int(1..maxmode), int(0..horizon)] of bool

$  Each activity has a mode. 
find mode : matrix indexed by [int(1..jobs)] of int(1..maxmode)

branching on [jobStart,jobActive]

minimising jobStart[jobs]   $ minimise start time of last job.

such that

$  Get rid of excess jobActive variables.
forAll j : int(1..jobs) .
  forAll m : int(length(durations[j,..])+1..maxmode) .
    forAll t : int(0..horizon) .
      !jobActive[j,m,t],

$  Bound the mode variables.
forAll j : int(1..jobs) .
  mode[j]<=length(durations[j,..]),

$ Connect jobActive and jobStart
forAll j : int(1..jobs) .
  forAll m : int(1..length(durations[j,..])) .
    forAll t : int(0..horizon) .
      (jobActive[j, m, t]<->(jobStart[j]<=t /\ jobStart[j]>t-durations[j,m] /\ mode[j]=m)),

$  Job successors with table.
forAll j : indexOf(jobStart) .
  forAll succ : indexOf(successors[j,..]) .
    jobStart[j]+duration[j]<=jobStart[successors[j,succ]],

forAll j : indexOf(jobStart) . 
  makeTable(duration[j]=durations[j,mode[j]]),

$ Renewable resource constraints
forAll t : int(0..horizon) .
  forAll res : int(1..resourcesRenew).
    sum([ jobActive[j, m, t] * resourceUsage[j, m, res] | j: int(1..jobs), m: indexOf(durations[j,..])])<=resourceLimits[res],

$  Non-renewable resource cts
forAll res : int(resourcesRenew+1..resources) .
    sum([ resourceUsage[j, m, res] * (mode[j]=m) | j: int(1..jobs), m: int(1..maxmode) ])<=resourceLimits[res],

$  Fix the first activity to 0.
jobStart[1]=0,

true

